import boto3
from PIL import Image
import io
import os
import time
from urllib.parse import unquote_plus

s3 = boto3.client('s3')

# 🎯 Change this to your actual target bucket name
TARGET_BUCKET = "target-source-26"

def lambda_handler(event, context):
    # ✅ Decode S3 event details safely
    source_bucket = event['Records'][0]['s3']['bucket']['name']
    object_key = unquote_plus(event['Records'][0]['s3']['object']['key'])
    print(f"Processing file: {object_key} from bucket: {source_bucket}")

    try:
        # 🕓 Optional retry in case file isn’t immediately available
        for attempt in range(3):
            try:
                response = s3.get_object(Bucket=source_bucket, Key=object_key)
                break
            except s3.exceptions.NoSuchKey:
                print(f"File not found yet, retrying... attempt {attempt+1}")
                time.sleep(2)
        else:
            raise Exception("File not found after multiple retries")

        # 🖼 Read image from S3
        image_content = response['Body'].read()
        image = Image.open(io.BytesIO(image_content))

        # 🪄 Resize while preserving aspect ratio
        image.thumbnail((300, 300))

        # 💾 Save resized image to memory buffer
        buffer = io.BytesIO()
        image_format = image.format if image.format else "PNG"
        image.save(buffer, format=image_format)
        buffer.seek(0)

        # 📦 Create a new file name for the resized image
        file_name, file_ext = os.path.splitext(object_key)
        resized_key = f"{file_name}_resized{file_ext}"

        # ☁️ Upload resized image to target bucket
        s3.put_object(
            Bucket=TARGET_BUCKET,
            Key=resized_key,
            Body=buffer,
            ContentType=response.get('ContentType', 'image/png')
        )

        print(f"✅ Resized image uploaded to {TARGET_BUCKET}/{resized_key}")

        return {
            'statusCode': 200,
            'body': f"Resized image saved as {resized_key}"
        }

    except Exception as e:
        print(f"❌ Error processing {object_key}: {e}")
        return {
            'statusCode': 500,
            'body': str(e)
        }
